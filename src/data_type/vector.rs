/// 在 Rust 中没有内置的 list 类型，一般使用 Vec<T>。
/// Vec<T> 中的所有元素类型必须相同。
///
/// 向量长度可变，可以动态增加或删除元素。
///
/// 底层存储在堆上（heap），适合动态数据。
#[allow(unused_variables)]
pub fn vector_type_demo(){
    // 类型：[i32; 5]（元素类型 i32，长度固定 5）
    // 长度固定 → 编译时确定，不能动态增加或删除元素
    // 存储：栈（stack）
    // 优点：速度快、内存连续、开销小
    // 缺点：大小不可变，适合长度已知的情况
    let a = [1, 2, 3, 4, 5];

    // 类型：Vec<i32>（动态数组 / 向量）
    // 长度可变 → 可以 push、pop、insert 等
    // 存储：堆（heap）
    // 优点：动态增长，灵活
    // 缺点：相比数组有堆分配开销
    let mut _numbers = vec![1, 2, 3];

    // 类型：Vec<i32>
    // 初始为空，需要 push 添加元素
    // 存储：堆
    // 优点：在不知道初始元素的情况下灵活创建
    // 常用于从输入、计算结果等动态生成集合
    let mut _v: Vec<i32> = Vec::new();
}